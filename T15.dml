# Read the cleaned Criteo data
data = read("data.csv", data_type="frame", format="csv", header=FALSE);

# Make a list of transform specifications
specs = list();
# Bin(13) w/ 10 bins, RC(27)
jspec1 = read("./specs/criteo_fe1.json", data_type="scalar", value_type="string");
specs = append(specs, jspec1);
# Bin(13) w/ 5 bins, RC(27)
jspec2 = read("./specs/criteo_fe2.json", data_type="scalar", value_type="string");
specs = append(specs, jspec2);
# Bin(13) w/ 10 bins, FH(26), RC(1)
jspec3 = read("./specs/criteo_fe3.json", data_type="scalar", value_type="string");
specs = append(specs, jspec3);
# Bin(13) w/ 5 bins, DC(26), RC(1)
jspec4 = read("./specs/criteo_fe4.json", data_type="scalar", value_type="string");
specs = append(specs, jspec4);
# Bin(13) w/ 5 bins, RC(12), FH(15)
jspec5 = read("./specs/criteo_fe5.json", data_type="scalar", value_type="string");
specs = append(specs, jspec5);
# Bin(13) w/ 5 bins, RC(1), DC(39)
jspec6 = read("./specs/criteo_fe6.json", data_type="scalar", value_type="string");
specs = append(specs, jspec6);

colList = matrix(1, rows=1, cols=ncol(data));
maxIter = length(specs);
lim = 3; #3
R = matrix(0, rows=2*lim, cols=1);

for (i in 1:lim) {
  tot_tft = 0;
  tot_tnb = 0;
  for (iter in 1:maxIter) {
    [tmp, jspec] = remove(specs, iter);
    jspec = as.scalar(jspec);
    t3 = time();
    [X, M] = transformencode(target=data, spec=jspec);
    #print("x: ")
    #print(X)
    t4 = time();
    tft = floor((t4-t3)/1000000);  
    print("Elapsed time for encoding criteo_fe"+iter+" = "+tft);
    tot_tft = tot_tft + tft;
    nr = nrow(X);
    nc = ncol(X);

  }
  R[i,1] = tot_tft;
  R[i+lim,1] = tot_tnb;
}
print(toString(R));
write(R, "featureeng_dml.dat", format="csv", sep="\t");

# Gilad Katz et al. ExploreKit: Automatic Feature Generation and Selection.2016.ICDM.

